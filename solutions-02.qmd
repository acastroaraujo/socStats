---
title: "Solutions 2"
editor: visual
---

```{r}
#| code-summary: "Set up"
#| message: false
library(tidyverse)
library(nycflights13)
```

**Note. I just realized that there where publicly available solutions to these exercises here:**

<https://mine-cetinkaya-rundel.github.io/r4ds-solutions/data-transform.html>

## Rows

### 4.2.5.1

> In a single pipeline for each condition, find all flights that meet the condition:

*Had an arrival delay of two or more hours*

```{r}
flights |> 
  filter(arr_delay >= 120)
```

*Flew to Houston (`IAH` or `HOU`)*

```{r}
flights |> 
  filter(dest == "IAH" | dest == "HOU")
```

*Were operated by United, American, or Delta*

```{r}
flights |> 
  ## hint: check the nycflights13::airlines dataset
  filter(carrier %in% c("UA", "AA", "DL"))
```

*Departed in summer (July, August, and September)*

```{r}
flights |> 
  filter(month %in% 7:9)
```

*Arrived more than two hours late, but didn't leave late*

```{r}
flights |> 
  ## I will also accept dep_delay <= 0
  filter(arr_delay > 120 & dep_delay <= 5)
```

*Were delayed by at least an hour, but made up over 30 minutes in flight*

```{r}
flights |> 
  # this also works:
  # filter(dep_delay >= 60 & dep_delay - arr_delay > 30)
  filter(dep_delay >= 60, dep_delay - arr_delay > 30)
```

### 4.2.5.2

> Sort `flights` to find the flights with longest departure delays. Find the flights that left earliest in the morning.

```{r}
flights |> 
  arrange(desc(dep_delay))

flights |> 
  arrange(dep_time)
```

### 4.2.5.3

> Sort `flights` to find the fastest flights. (Hint: Try including a math calculation inside of your function.)

The fastest flights will travel the longest distances in the least amount of time. Thus, I will have to calculate km/h. (Miles per hour is fine too I guess).

```{r}
to_kmh <- function(distance, minutes) {
  (distance * 1.60934) / (minutes / 60)
}

flights |> 
  mutate(speed = to_kmh(distance, air_time)) |>
  relocate(speed) |> 
  arrange(desc(speed))
```

### 4.2.5.4

> Was there a flight on every day of 2013?

```{r}
flights |> 
  distinct(month, day) |> 
  summarize(num_days = n())
```

Yes!

### 4.2.5.5

> Which flights traveled the farthest distance? Which traveled the least distance?

```{r}
flights |> 
  arrange(desc(distance))

flights |> 
  arrange(distance)
```

### 4.2.5.6

> Does it matter what order you used [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) and [`arrange()`](https://dplyr.tidyverse.org/reference/arrange.html) if you're using both? Why/why not? Think about the results and how much work the functions would have to do.

No, it doesn't matter. Filter does logical subsetting, and it doesn't matter if we re-arrange the data before or after subsetting.

## Columns

### 4.3.5.1

> Compare `dep_time`, `sched_dep_time`, and `dep_delay`. How would you expect those three numbers to be related?

`sched_dep_time` = `dep_time` - `dep_delay`

### 4.3.5.2

> Brainstorm as many ways as possible to select `dep_time`, `dep_delay`, `arr_time`, and `arr_delay` from `flights`.

```{r}
flights |> 
  select(dep_time, dep_delay, arr_time, arr_delay)

flights |> 
  select(starts_with("dep_"), starts_with("arr_"))

flights |> 
  select(dep_time:arr_delay) |> 
  ## or ! instead of -
  select(-c(2, 5))

flights |> 
  select(matches("(^arr|^dep)_(time$|delay$)"))
```

### 4.3.5.3

> What happens if you specify the name of the same variable multiple times in a [`select()`](https://dplyr.tidyverse.org/reference/select.html) call?

You only get the variable once!

```{r}
flights |> 
  select(day, day, day)
```

Note that this is different from "base" subsetting with character vectors.

```{r}
flights[, c("day", "day", "day")]
```

### 4.3.5.4

> What does the [`any_of()`](https://tidyselect.r-lib.org/reference/all_of.html) function do? Why might it be helpful in conjunction with this vector?
>
> ```{r}
> variables <- c("year", "month", "day", "dep_delay", "arr_delay")
> ```

It allows you to specify the name of variables for subsetting outside the dplyr pipeline.

```{r}
variables <- c("year", "month", "day", "dep_delay", "arr_delay")

flights |> 
  select(any_of(variables))
```

### 4.3.5.5

> Does the result of running the following code surprise you? How do the select helpers deal with upper and lower case by default? How can you change that default?

```{r}
flights |> 
  select(contains("TIME"))
```

Yes, it's surprising to me. The selection helpers have the argument `ignore.case = TRUE` as a default.

```{r}
flights |> 
  select(contains("TIME", ignore.case = FALSE))
```

### 4.3.5.6

> Rename `air_time` to `air_time_min` to indicate units of measurement and move it to the beginning of the data frame.

```{r}
flights |> 
  rename(air_time_min = air_time) |> 
  relocate(air_time_min)
```

### 4.3.5.7

> Why doesn't the following work, and what does the error mean?

```{r}
#| error: true
flights |> 
  select(tailnum) |> 
  arrange(arr_delay)
```

Line #2 drops every variable in the data frame except `tailnum`. Thus, there's no `arr_delay` object for `arrange()` to work with.

## Groups

### 4.5.7.1

> Which carrier has the worst average delays? Challenge: can you disentangle the effects of bad airports vs. bad carriers? Why/why not? (Hint: think about flights \|\> group_by(carrier, dest) \|\> summarize(n()))

```{r}
flights |> 
  group_by(carrier) |> 
  summarize(avg_dep_delay = mean(dep_delay, na.rm = TRUE)) |> 
  arrange(desc(avg_dep_delay))

flights |> 
  filter(carrier == "F9") |> 
  count(carrier, dest, origin) 

flights |> 
  count(carrier, dest) |> 
  filter(dest == "DEN")

flights |> 
  group_by(carrier, dest, origin) |> 
  summarize(n = n(), avg_dd = mean(dep_delay, na.rm = TRUE)) |> 
  filter(dest == "DEN" | carrier == "F9") |> 
  arrange(avg_dd)
  
```

Frontier Airlines (F9) is headquartered in Denver and this dataset only records flights from LGA to DEN. This means there's no variance in F9 accross airports. We might be able to disentangle the effect of airport and carrier, but we will have to make assumptions.

### 4.5.7.2

> Find the flights that are most delayed upon departure from each destination.

```{r}
flights |> 
  group_by(dest) |> 
  slice_max(dep_delay) |> 
  relocate(dest, carrier, dep_delay) |> 
  arrange(desc(dep_delay))
```

### 4.5.7.3

> How do delays vary over the course of the day. Illustrate your answer with a plot.

```{r}
flights |> 
  group_by(hour) |> 
  filter(!is.na(dep_delay)) |> 
  summarize(
    avg = mean(dep_delay),
    se = sd(dep_delay) / sqrt(n())
  ) |> 
  ggplot(aes(hour, avg)) + 
  geom_pointrange(aes(ymin = avg - 2*se, ymax = avg + 2*se), size = 1/10) +
  theme_light()
```

### 4.5.7.4

> What happens if you supply a negative `n` to [`slice_min()`](https://dplyr.tidyverse.org/reference/slice.html) and friends?

The documentation for this behavior is not great and I can't think of a single example in which I'd use those functions that way instead of using `arrange()`.

```{r}
A <- flights |> 
  slice_min(dep_delay, n = -1)

B <- flights |> 
  arrange(dep_delay)

identical(A, B)

C <- flights |> 
  slice_max(dep_delay, n = -1) 

D <- flights |> 
  arrange(desc(dep_delay))

identical(C, D)
```

### 4.5.7.5

> Explain what [`count()`](https://dplyr.tidyverse.org/reference/count.html) does in terms of the dplyr verbs you just learned. What does the `sort` argument to [`count()`](https://dplyr.tidyverse.org/reference/count.html) do?

Count is a short-hand for `group_by` + `summarize`. The `sort` argument accomplishes the same as `arrange`.

```{r}
flights |> 
  group_by(origin) |> 
  summarize(n = n()) |> 
  arrange(desc(n))

flights |> 
  count(origin, sort = TRUE)
```

### 4.5.7.6

> Suppose we have the following tiny data frame:
>
> ```{r}
> df <- tibble(
>   x = 1:5,
>   y = c("a", "b", "a", "a", "b"),
>   z = c("K", "K", "L", "L", "K")
> )
> ```
>
> Write down what you think the output will look like, then check if you were correct, and describe what [`group_by()`](https://dplyr.tidyverse.org/reference/group_by.html) does.
>
> ```{r}
> #| eval: false
> df |>
>   group_by(y)
> ```

*two groups?*

```{r}
df |> group_by(y)
```

> Write down what you think the output will look like, then check if you were correct, and describe what `arrange()` does. Also comment on how it's different from the `group_by()` in part (a)?
>
> ```{r}
> #| eval: false
> df |>
>   arrange(y)
> ```

*I assume that y will be a, a, a, b, b and that x will be 1, 3, 4, 2, 5*

```{r}
df |>
  arrange(y)
```

> Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does.
>
> ```{r}
> #| eval: false
> >
> df |>
>   group_by(y) |>
>   summarize(mean_x = mean(x))
> ```

I assume the new data frame will have two columns (`x`, `y`) and two rows (`y = 2.67`, `y = 3.5`)

```{r}
df |>
  group_by(y) |>
  summarize(mean_x = mean(x))
```

> Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does. Then, comment on what the message says.
>
> ```{r}
> #| eval: false
> >
> df |>
>   group_by(y, z) |>
>   summarize(mean_x = mean(x))
> ```

I assume there will be 3 columns (`x`, `y`, `z`) and three rows (`x = c(1, 3.5, 3.5)`).

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))
```

> Write down what you think the output will look like, then check if you were correct, and describe what the pipeline does. How is the output different from the one in part (d).
>
> ```{r}
> df |>
>   group_by(y, z) |>
>   summarize(mean_x = mean(x), .groups = "drop")
> ```

I assume the same answer, except the output won't be "grouped."

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x), .groups = "drop")
```

> Write down what you think the outputs will look like, then check if you were correct, and describe what each pipeline does. How are the outputs of the two pipelines different?
>
> ```{r}
> #| eval: false
> >
> df |>
>   group_by(y, z) |>
>   summarize(mean_x = mean(x))
> >
> df |>
>   group_by(y, z) |>
>   mutate(mean_x = mean(x))
> ```

The results will be similar, except that the first pipeline will have 3 rows and the second one will have 5 rows.

```{r}
df |>
  group_by(y, z) |>
  summarize(mean_x = mean(x))

df |>
  group_by(y, z) |>
  mutate(mean_x = mean(x))
```
