[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Social Statistics I (Exercises)",
    "section": "",
    "text": "Preface\nSyllabus\nHi everyone, I will be uploading the homework questions to this website.\nFeel free to reach out to me with any questions."
  },
  {
    "objectID": "index.html#resources",
    "href": "index.html#resources",
    "title": "Social Statistics I (Exercises)",
    "section": "Resources",
    "text": "Resources\nThese are my personal recommendations for resources to start getting interested in statistics. It’s somewhat incomplete—e.g., there are no dedicated textbooks to causal inference, which is what we’ll cover next semester.\nClass Resources:\n\nR for Data Science (Wickham, Çetinkaya-Rundel, and Grolemund 2023)\nI learned a lot using the first edition of this book. Feel free to skip some chapters on a first pass and come back to them if you think you might need them (e.g., strings, regular expressions, webscraping). Also, I suggest you start with chapters 29 and 30.\nThe tidyverse style guide\nIt will help you write pretty code.\nData Visualization (Healy 2018)\nIt will help you make good graphs.\n\nGood books to play around with:\n\nData Analysis for Social Science: A Friendly and Practical Introduction (Llaudet and Imai 2022)\nVery introductory but useful.\nStatistical Inference via Data Science (Ismay and Kim 2019)\nIt’s good!\nQuantitative Social Science: An Introduction in Tidyverse (Imai and Williams 2022)\nI read this one a while ago, before it was re-written in tidyverse dialect. The chapters on probability and uncertainty are a great self-contained introduction to probability and statistical inference.\nRegression and Other Stories (Gelman, Hill, and Vehtari 2020)\nThis one seems a little too advanced for a first pass, but not advanced enough for a second pass? I like it a lot though.\n\nAdvanced Resources:\n\nAdvanced R (Wickham 2019).\nThis one is good for those of you that have a background in computer science and are looking for reasons to like R. It’s also good for those of you who finished (most of) R4DS and want to learn some computer science concepts.\nIntroduction to probability (Blitzstein and Hwang 2019)\nCovers more probability theory than what you’ll probably need, but it’s a fascinating topic and it’s very accessible.\nStatistical Rethinking (McElreath 2020)\nIt’s what the cool kids are into these days.\nModern Statistics for Modern Biology (Holmes and Huber 2018)\nGreat book, very different. But the examples are a bit outside of what we usually encounter in social science.\n\n\n\n\n\nBlitzstein, Joseph K., and Jessica Hwang. 2019. Introduction to Probability. CRC Press.\n\n\nGelman, Andrew, Jennifer Hill, and Aki Vehtari. 2020. Regression and Other Stories. Cambridge University Press.\n\n\nHealy, Kieran. 2018. Data Visualization: A Practical Introduction. https://socviz.co/.\n\n\nHolmes, Susan, and Wolfgang Huber. 2018. Modern Statistics for Modern Biology. Cambridge University Press.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science: An Introduction in Tidyverse. Princeton University Press.\n\n\nIsmay, Chester, and Albert Y. Kim. 2019. Statistical Inference via Data Science: A ModernDive into r and the Tidyverse. CRC Press.\n\n\nLlaudet, Elena, and Kosuke Imai. 2022. Data Analysis for Social Science: A Friendly and Practical Introduction. Princeton University Press.\n\n\nMcElreath, Richard. 2020. Statistical Rethinking: A Bayesian Course with Examples in r and Stan. CRC press.\n\n\nWickham, Hadley. 2019. Advanced R. CRC Press.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science. \" O’Reilly Media, Inc.\"."
  },
  {
    "objectID": "sec1.html",
    "href": "sec1.html",
    "title": "Math and computing preliminaries",
    "section": "",
    "text": "To include:\n\nsearch()\nMarkdown (including cross-references and bib)\nLaTeX\nsubsetting\ndata structures\nread and export"
  },
  {
    "objectID": "week1.html#data-structures",
    "href": "week1.html#data-structures",
    "title": "1  Week 1",
    "section": "1.1 Data Structures",
    "text": "1.1 Data Structures\n\n1.1.1 Vectors\nR has two kinds of vectors:\n\nAtomic vectors. All elements of the vector must have the same type (e.g., logical, integer, double, character).1 They are homogeneous.\nSee Figure 1.1.\nNote that integer and double are collectively known as numeric.\nLists. The elements of the vector can have different types. They can be heterogeneous.\n\nAll data structures—e.g., data frames, matrices, factors, dates, and more complex model objects—are built on top of these. All of these will have an additional class attribute. For example, a “data frame” (e.g., mtcars) is basically a list of atomic vectors that have the same length().\n\n\n\nFigure 1.1: Atomic vectors\nhttps://adv-r.hadley.nz/vectors-chap.html#atomic-vectors\n\n\n\n\n\n\n\n\nExercise 1.1\nTry typing typeof(mtcars) and class(mtcars) in the console to see what happens.\nNow type the following chunks of code into your console and understand what they do:\n\nnrow(mtcars)\nncol(mtcars)\nlength(mtcars)\ndim(mtcars)\nrownames(mtcars)\ncolnames(mtcars)\n\nBriefly describe what each of these do.\n\n\n\nNote. The absence of a vector is usually represented with NULL (as opposed to NA which is used to represent the absence of a value in a vector). NULL typically behaves like a vector of length 0.\nCreating vectors of length 1 (scalars).\nEach of the four primary types depicted in Figure 1.1 can be created using a special syntax:\n\nLogicals can be written in full (TRUE or FALSE), or abbreviated (T or F).\nDoubles are the default for numbers (123). They can also be specified in decimal (0.1234) and scientific (1.23e4).\nThere are three special values unique to doubles: Inf, -Inf, and NaN (not a number). Don’t worry about these for now!\nIntegers are written similarly to doubles but must be followed by L (1234L)\nStrings are surrounded by \" (\"hi\") or ' ('bye').\n\n\n\n\n\n\n\nExercise 1.2\nI suggest you always use long-form when creating logical vectors. Try assigning a different value to TRUE and to T.\n\n\nCode\nT &lt;- 123\nTRUE &lt;- 123\n\n\nWhat just happened?\nExercise 1.3\nImplicit coercion\nYou can create atomic vectors of any length with c() for “concatenate”.\nFor example:\n\n\nCode\nlgl &lt;- c(TRUE, FALSE, NA)\nint &lt;- c(1L, 6L, NA, 10L)\ndbl &lt;- c(1, NA, 2.5, 4.5)\nchr &lt;- c(NA, \"these are\", \"some strings\")\n\n\nRecall that atomic vectors are homogeneous. If you try to concatenate vectors of different types you will end up discovering implicit coercion. Basically, different types will be coerced in the following order: logical → integer → double → character.\nFor example, a logical and a character combine into a character:\n\n\nCode\nstr(c(TRUE, \"chr\")) ## str() is (almost) identical to dplyr::glimpse()\n\n\n chr [1:2] \"TRUE\" \"chr\"\n\n\nTest your knowledge of the vector coercion rules by predicting the output of the following uses of c():\n\n\nCode\nc(1, FALSE)\nc(\"a\", 1)\nc(TRUE, 1L)\n\n\nExercise 1.4\nExplicit coercion\nExplicit coercion happens when you call a function like as.logical(), as.integer(), as.double(), or as.character(). Use as.integer() on FALSE and TRUE, what values do they get coerced to?\nExercise 1.5\nThe most common form of implicit coercion\nThe following chunk of code creates a logical vector of size 75.\n\n\nCode\nx &lt;- sample(c(TRUE, FALSE), size = 75, replace = TRUE)\nstr(x)\n\n\n logi [1:75] TRUE FALSE TRUE FALSE FALSE TRUE ...\n\n\nUse sum(x) to get the number of TRUE values. Use mean(x) to get the proportion of TRUE values. Verify that mean(x) and sum(x) / length(x) give the same value.\n\n\n\nWe will usually use logical operators to transform a variable and then do the kinds of calculations in Exercise 1.5.\nFor example:\n\n\nCode\n## the proportion of cars in the dataset with more than 3 carburators\nmean(mtcars$carb &gt; 3)\n\n\n[1] 0.375\n\n\nSequences\nWe will sometimes create sequences of integers for various purposes (e.g., subsetting). For example, we can use the seq() to create a sequence of even numbers this way:\n\n\nCode\nseq(from = 2, to = 26, by = 2)\n\n\n [1]  2  4  6  8 10 12 14 16 18 20 22 24 26\n\n\nYou can create a simple sequence of numbers from x1 to x2 by using the : operator this way:\n\n\nCode\n1:10\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nCode\nseq(1, 10, by = 1)\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\n1.1.2 Subsetting\nVectors\nAs a reminder, you can subset named lists (and therefore data frames) with the $ operator.\nFor example:\n\n\nCode\nmtcars$mpg\n\n\n [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4\n[16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7\n[31] 15.0 21.4\n\n\nCode\nx &lt;- list(chr, lgl, letters)\nstr(x)\n\n\nList of 3\n $ : chr [1:3] NA \"these are\" \"some strings\"\n $ : logi [1:3] TRUE FALSE NA\n $ : chr [1:26] \"a\" \"b\" \"c\" \"d\" ...\n\n\nCode\nnames(x) &lt;- c(\"chr\", \"lgl\", \"alphabet\")\nstr(x)\n\n\nList of 3\n $ chr     : chr [1:3] NA \"these are\" \"some strings\"\n $ lgl     : logi [1:3] TRUE FALSE NA\n $ alphabet: chr [1:26] \"a\" \"b\" \"c\" \"d\" ...\n\n\nCode\nx$alphabet\n\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\nYou can also do this using the [ and [[ operators, but this time you have to put the name in quotation marks.\nThus:\n\n\nCode\nmtcars[mpg]\n\n\nError in `[.data.frame`(mtcars, mpg): object 'mpg' not found\n\n\nCode\nmtcars[\"mpg\"]\n\n\n                     mpg\nMazda RX4           21.0\nMazda RX4 Wag       21.0\nDatsun 710          22.8\nHornet 4 Drive      21.4\nHornet Sportabout   18.7\nValiant             18.1\nDuster 360          14.3\nMerc 240D           24.4\nMerc 230            22.8\nMerc 280            19.2\nMerc 280C           17.8\nMerc 450SE          16.4\nMerc 450SL          17.3\nMerc 450SLC         15.2\nCadillac Fleetwood  10.4\nLincoln Continental 10.4\nChrysler Imperial   14.7\nFiat 128            32.4\nHonda Civic         30.4\nToyota Corolla      33.9\nToyota Corona       21.5\nDodge Challenger    15.5\nAMC Javelin         15.2\nCamaro Z28          13.3\nPontiac Firebird    19.2\nFiat X1-9           27.3\nPorsche 914-2       26.0\nLotus Europa        30.4\nFord Pantera L      15.8\nFerrari Dino        19.7\nMaserati Bora       15.0\nVolvo 142E          21.4\n\n\n\n\n\n\n\n\nExercise 1.6\nWhat is the difference between mtcars[\"mpg\"] and mtcars[[\"mpg\"]]? More generally, what is the difference between the [ and [[ operators?\nWhich of the following two is TRUE?\n\n\nCode\nidentical(mtcars[\"mpg\"], mtcars$mpg)\nidentical(mtcars[[\"mpg\"]], mtcars$mpg)\n\n\n\n\n\nYou will be subsetting different kinds of things in R—mostly data frames—using integers and logicals.\n\n\n\n\n\n\nExercise 1.7\nletters is a built-in object in R that contains the 26 letters of English alphabet.\nUsing the [ operator, do the following:\n\nExtract the 17th value of letters\nCreate a sequence of even numbers from 2 to 26 and use that to subset letters\nUse 8:12 to subset letters.\n\nThis is known as integer subsetting.\nWhat happens if instead of [ you use [[?\n\n\n\nSubsetting + Assignment\nYou can use the assignment operator &lt;- in combination with subsetting to replace the values of a vector.\nFor example:\n\n\nCode\ndbl\n\n\n[1] 1.0  NA 2.5 4.5\n\n\nCode\ndbl[1] &lt;- 10\ndbl\n\n\n[1] 10.0   NA  2.5  4.5\n\n\nCode\ndbl[is.na(dbl)] &lt;- 0\ndbl\n\n\n[1] 10.0  0.0  2.5  4.5\n\n\nMake sure you understand what is.na() is doing here. Did we just do “integer” or “logical” subsetting?\n\n\n\n\n\n\nExercise 1.8\nNow that you know all this\nReplace the 18th value of letters with a missing value (NA).\n\n\n\n\n\n1.1.3 The most common error you’ll see\n\n\nCode\nmean[1:5]\n\n\nError in mean[1:5]: object of type 'closure' is not subsettable\n\n\nThis just means that you have tried to subset a function, and functions are most definitely not vectors.\nThis will happen for example if you think you created a dataset called df and try to extract a column:\n\n\nCode\ndf$col\n\n\nError in df$col: object of type 'closure' is not subsettable\n\n\n\n\n1.1.4 Data Frames\nThe most obvious use case $, [, or [[ is in the context of working with data frames.\nHere we will use the [ operator behaves differently when used on some objects—e.g., data frames and matrices.\n\nWhen subsetting with a single index, data frames behave like lists and index the columns, so mtcars[1:2] selects the first two columns.\nWhen subsetting with two indices, mtcars[1:3, ] selects the first three rows (and all the columns); mtcars[5, ] selects the fifth row and all columns; mtcars[1:5, \"cyl\"] selects the cyl column and the first five rows. Matrices behave in the same way.\n\nLogical subsetting\nThe most common way of using logicals to subset data frames is to learn some Boolean operators—e.g., &lt;, &lt;=, &gt;, &gt;=, !=, and ==.\nFor example, we can create a logical vector that tests for mtcars$wt values greater than 4.\n\n\nCode\nmtcars$wt &gt; 4\n\n\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n[13] FALSE FALSE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n\n\nAnd then we can subset with [:\n\n\nCode\nmtcars[mtcars$wt &gt; 4, ]\n\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\n\n\n\n\n\n\n\n\nExercise 1.9\nSubset mtcars so that we only see the observations for which cyl == 4.\nSubset mtcars so that we only see the observations for which mpg is greater than 23.\n\n\n\nSometimes it will be easier to use the %in% operator to test for many conditions at the same time.\nFor example:\n\n\nCode\nmtcars[mtcars$carb %in% c(3, 6, 8), ]\n\n\n               mpg cyl  disp  hp drat   wt qsec vs am gear carb\nMerc 450SE    16.4   8 275.8 180 3.07 4.07 17.4  0  0    3    3\nMerc 450SL    17.3   8 275.8 180 3.07 3.73 17.6  0  0    3    3\nMerc 450SLC   15.2   8 275.8 180 3.07 3.78 18.0  0  0    3    3\nFerrari Dino  19.7   6 145.0 175 3.62 2.77 15.5  0  1    5    6\nMaserati Bora 15.0   8 301.0 335 3.54 3.57 14.6  0  1    5    8\n\n\nAlternatively we could have done this:\n\n\nCode\nmtcars[mtcars$carb == 3 | mtcars$carb == 6 | mtcars$carb == 8, ]\n\n\n               mpg cyl  disp  hp drat   wt qsec vs am gear carb\nMerc 450SE    16.4   8 275.8 180 3.07 4.07 17.4  0  0    3    3\nMerc 450SL    17.3   8 275.8 180 3.07 3.73 17.6  0  0    3    3\nMerc 450SLC   15.2   8 275.8 180 3.07 3.78 18.0  0  0    3    3\nFerrari Dino  19.7   6 145.0 175 3.62 2.77 15.5  0  1    5    6\nMaserati Bora 15.0   8 301.0 335 3.54 3.57 14.6  0  1    5    8\n\n\nWhich do you prefer?"
  },
  {
    "objectID": "week1.html#search",
    "href": "week1.html#search",
    "title": "1  Week 1",
    "section": "1.2 Search",
    "text": "1.2 Search\nIn this section I will introduce two functions that are pretty much useless except for the fact that they will help use understand how R finds “objects” in your R session: search() and find().\nType search() into your console. I you are like me—and haven’t loaded any package yet—you should see the exact same output as this:\n\n\nCode\nsearch()\n\n\n[1] \".GlobalEnv\"        \"package:stats\"     \"package:graphics\" \n[4] \"package:grDevices\" \"package:utils\"     \"package:datasets\" \n[7] \"package:methods\"   \"Autoloads\"         \"package:base\"     \n\n\n.GlobalEnv is the what’s known as the “global environment.” Any variable that shows up in your Environment pane is stored there.\nType names(.GlobalEnv) into the console and see what shows up. You’ll notice that there’s an object called .Random.seed in .GlobalEnv that doesn’t show up in your Environment pane. That’s because R “hides” any variable that has a . prefix.\n\n\nCode\n.secret_var &lt;- 1:10\n.secret_var\n\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nYou should not be able to see .secret_var in the Environment pane and yet it’s there!\nAny time you type something in R, it will proceed to search for it sequentially: first, in .GlobalEnv, then in the built-in stats package, then in graphics, and so on until it reaches the base package.\nIgnore “Autoloads” and “tools:rstudio” (this last one shows up when you type search() in the console if you are using RStudio). This is not important!\nSo, if you type asdfasdfasdf into the console, R will search all these environments and produce an error once it comes out empty handed.\n\n\nCode\nasdfasdfasdf\n\n\nError in eval(expr, envir, enclos): object 'asdfasdfasdf' not found\n\n\nBut if you type mtcars, R will search all these environments until it finds mtcars living in the built-in datasets package.\nYou can verify that this is the case using the find() function.\n\n\nCode\nfind(\"mtcars\")\n\n\n[1] \"package:datasets\"\n\n\nNow, suppose you decide to create an object called mtcars, which then gets saved to the global environment.\n\n\nCode\nmtcars &lt;- \"this is not the mtcars dataset\"\nmtcars\n\n\n[1] \"this is not the mtcars dataset\"\n\n\nIf you now type find(\"mtcars\") into the console you’ll the names of two environments, in the order that R finds mtcars.\n\n\nCode\nfind(\"mtcars\")\n\n\n[1] \".GlobalEnv\"       \"package:datasets\"\n\n\nYou can still access the original mtcars dataset using the :: operator like this:\n\n\nCode\nstr(datasets::mtcars)\n\n\n'data.frame':   32 obs. of  11 variables:\n $ mpg : num  21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ...\n $ cyl : num  6 6 4 6 8 6 8 4 4 6 ...\n $ disp: num  160 160 108 258 360 ...\n $ hp  : num  110 110 93 110 175 105 245 62 95 123 ...\n $ drat: num  3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ...\n $ wt  : num  2.62 2.88 2.32 3.21 3.44 ...\n $ qsec: num  16.5 17 18.6 19.4 17 ...\n $ vs  : num  0 0 1 1 0 1 0 1 1 1 ...\n $ am  : num  1 1 1 0 0 0 0 0 0 0 ...\n $ gear: num  4 4 4 3 3 3 3 4 4 4 ...\n $ carb: num  4 4 1 1 2 1 4 2 2 4 ...\n\n\nIn fact, you can use pkgname::obj to access any object in any package (even if you haven’t loaded it yet).\nFor example:\n\n\nCode\ndplyr::glimpse(datasets::mtcars)\n\n\nRows: 32\nColumns: 11\n$ mpg  &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,…\n$ cyl  &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,…\n$ disp &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 16…\n$ hp   &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 180, 180…\n$ drat &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,…\n$ wt   &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.…\n$ qsec &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18…\n$ vs   &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,…\n$ am   &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,…\n$ gear &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,…\n$ carb &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,…\n\n\n\n1.2.1 Errors!\nSuppose you want to analyze the penguins dataset contained in the palmerpenguins package.\nYou will have to type the following into your console once if you haven’t already:\n\n\nCode\ninstall.packages(\"palmerpenguins\")\n\n\nYou want to use the table() function to count up the number of times a specific year shows up in the dataset.\n\n\nCode\n# library(tidyverse)\n# library(palmerpenguins)\ntable(year)\n\n\nError in table(year): object 'year' not found\n\n\nOh no, an error!\nAfter realizing that you “commented out” the library(pkg) lines, you remove the # symbols and do this:\n\n\nCode\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ntable(year)\n\n\nError in unique.default(x, nmax = nmax): unique() applies only to vectors\n\n\nOh no, a different error!\nYou realize that table() has no way of knowing that you wanted to access the year variable in the penguins dataset. You forgot to subset!\nThis should work:\n\n\nCode\ntable(penguins$year)\n\n\n\n2007 2008 2009 \n 110  114  120 \n\n\n\n\n\n\n\n\nExercise 1.10\nUsing what told you earlier about the search() function, explain why you get two different errors. What is going on? What is R doing when you type table(year)? (You might want to type search() into the console again). In what package does R find the year object?"
  },
  {
    "objectID": "week1.html#dplyr-subsetting",
    "href": "week1.html#dplyr-subsetting",
    "title": "1  Week 1",
    "section": "1.3 dplyr subsetting",
    "text": "1.3 dplyr subsetting\nYou will almost never subset data frames in the way we did for the previous exercises. In fact, we won’t use “base R” much.\nInstead, we will use two functions contained in the dplyr package:\n\nslice() for integer subsetting.\nfilter() for logical subsetting.\nI recommend you follow those two links.\nPart of the reason we use tidyverse instead of base R is because the documentation for the tidyverse is excellent.\n\nDon’t forget to library(tidyverse) if you haven’t done so already.\n\n\nCode\nlibrary(tidyverse)\n\n\n\n\n\n\n\n\nExercise 1.11\nUse slice() to extract the even-numbered rows in the penguins dataset.\nIt will look something like this:\n\n\nCode\npenguins |&gt; \n  slice(\"SOME NUMERIC VECTOR GOES HERE\")\n\n\nNow use slice() to extract every third row—i.e., row 3, 6, 9, and so on.\nExercise 1.12\nUse filter() to extract the observations in the penguins dataset for which species == \"Gentoo\", island == \"Biscoe\", and body_mass_g is between 5,000 and 5,500."
  },
  {
    "objectID": "week1.html#footnotes",
    "href": "week1.html#footnotes",
    "title": "1  Week 1",
    "section": "",
    "text": "Technically, there are two other types of atomic vectors: complex and raw. I don’t think you’ll see much of these.↩︎"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Blitzstein, Joseph K., and Jessica Hwang. 2019. Introduction to\nProbability. CRC Press.\n\n\nGelman, Andrew, Jennifer Hill, and Aki Vehtari. 2020. Regression and\nOther Stories. Cambridge University Press.\n\n\nHealy, Kieran. 2018. Data Visualization: A Practical\nIntroduction. https://socviz.co/.\n\n\nHolmes, Susan, and Wolfgang Huber. 2018. Modern Statistics for\nModern Biology. Cambridge University Press.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social\nScience: An Introduction in Tidyverse. Princeton University Press.\n\n\nIsmay, Chester, and Albert Y. Kim. 2019. Statistical Inference via\nData Science: A ModernDive into r and the Tidyverse. CRC Press.\n\n\nLlaudet, Elena, and Kosuke Imai. 2022. Data Analysis for Social\nScience: A Friendly and Practical Introduction. Princeton\nUniversity Press.\n\n\nMcElreath, Richard. 2020. Statistical Rethinking: A Bayesian Course\nwith Examples in r and Stan. CRC press.\n\n\nWickham, Hadley. 2019. Advanced R. CRC Press.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023.\nR for Data Science. \" O’Reilly Media,\nInc.\"."
  }
]